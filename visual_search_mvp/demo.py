from core.search_engine import ImprovedVisualSearchEngine
from core.utils import ImageUtils, ColorAnalyzer
import cv2
import numpy as np

def create_color_test_images():
    """–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏"""
    # –°—Ü–µ–Ω–∞ —Å —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    scene = np.ones((400, 600, 3), dtype=np.uint8) * 240  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    
    # –ß—ë—Ç–∫–æ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ BGR
    colors = {
        'red': (0, 0, 255),      # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
        'blue': (255, 0, 0),     # –Ø—Ä–∫–æ-—Å–∏–Ω–∏–π  
        'green': (0, 255, 0),    # –Ø—Ä–∫–æ-–∑–µ–ª—ë–Ω—ã–π
        'yellow': (0, 255, 255), # –Ø—Ä–∫–æ-–∂—ë–ª—Ç—ã–π
    }
    
    positions = [(50, 50), (200, 50), (350, 50), (500, 50)]
    
    for (x, y), color_name in zip(positions, colors.keys()):
        color_bgr = colors[color_name]
        cv2.rectangle(scene, (x, y), (x+80, y+80), color_bgr, -1)
        cv2.putText(scene, color_name, (x, y+100), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)
    
    cv2.imwrite("scene2.jpg", scene)
    
    # Query - –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    query = np.ones((90, 90, 3), dtype=np.uint8) * 240
    cv2.rectangle(query, (5, 5), (85, 85), (0, 0, 255), -1)  # –ö—Ä–∞—Å–Ω—ã–π
    cv2.imwrite("query2.jpg", query)
    
    print("‚úÖ Created color test images")

def test_color_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    print("üé® Testing Color-Aware Search...")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    create_color_test_images()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
    engine = ImprovedVisualSearchEngine()
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    print("üì∏ Indexing color test scene...")
    engine.index_image("scene2.jpg", "color_test")
    
    # –¢–ï–°–¢ 1: –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–∞–π–¥—ë—Ç –≤—Å–µ –∫–≤–∞–¥—Ä–∞—Ç—ã)
    print("\nüîç TEST 1: Normal search (finds all squares)...")
    normal_results = engine.search("query2.jpg", top_k=4, threshold=0.3)
    print(f"Normal search found {len(normal_results)} objects")
    
    # –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ü–≤–µ—Ç—É
    print("\nüîç TEST 2: Color-filtered search (should find only RED)...")
    color_results = engine.search_with_color_filter(
        "red_query.jpg", 
        target_color="red",
        color_tolerance=25,
        top_k=4, 
        threshold=0.3
    )
    print(f"Color-filtered search found {len(color_results)} RED objects")
    
    # –¢–ï–°–¢ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    print("\nüîç TEST 3: Combined shape + color search...")
    combined_results = engine.search_combined(
        "red_query.jpg",
        target_color="red", 
        shape_weight=0.6,  # 60% –≤–∞–∂–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
        color_weight=0.4,  # 40% –≤–∞–∂–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞
        top_k=4
    )
    print(f"Combined search found {len(combined_results)} objects")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if normal_results:
        print("\nüñºÔ∏è Visualizing NORMAL search results...")
        ImageUtils.visualize_search_results("query2.jpg", normal_results)
    
    if color_results:
        print("\nüñºÔ∏è Visualizing COLOR-FILTERED results...")
        ImageUtils.visualize_search_results("query2.jpg", color_results)

if __name__ == "__main__":
    test_color_search()